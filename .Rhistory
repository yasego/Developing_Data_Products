pred1 <- predict(modFit1, testing)
pred2 <- predict(modFit2, testing)
pred3 <- predict(modFit3, testing)
predDF <- data.frame(pred1,pred2,pred3, testing$diagnosis)
pred1 <- predict(modFit1, testing)
pred2 <- predict(modFit2, testing)
pred3 <- predict(modFit3, testing)
predDF <- data.frame(pred1,pred2,pred3, testing$diagnosis)
combModFit <- train(diagnosis ~., method = "rf", data = predDF )
combPred <- predict(combModFit, predDF)
sqrt(sum((pred1-testing$diagnosis)^2))
sqrt(sum((pred2-testing$diagnosis)^2))
sqrt(sum((pred3-testing$diagnosis)^2))
combModFit <- train(diagnosis ~., method = "rf", data = predDF )
View(predDF)
predDF <- data.frame(pred1,pred2,pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~., method = "rf", data = predDF )
combPred <- predict(combModFit, predDF)
sqrt(sum((pred1-testing$diagnosis)^2))
sqrt(sum((pred2-testing$diagnosis)^2))
sqrt(sum((pred3-testing$diagnosis)^2))
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(training)
modFit <- train(CompressiveStrength~., method = "lasso")
modFit <- train(CompressiveStrength~., method = "lasso", data = training)
modFit <- train(CompressiveStrength~., method = "lasso", data = training)
print(modFit$finalmodel)
modFit$finalModel
modFit$finalModel$importance
varImp(modFit$finalModel,type=2 )
?plot.enet
plot.enet(modFit)
pred <- predict(modFit, testing)
class(pred)
names(modFit$finalModel)
modFit$finalModel$beta.pure
library(elasticnet)
enet(as.matrix(names(modFit$finalModel)),CompressiveStrength )
x <- as.matrix(names(modFit$finalModel))
x
enet(as.matrix(names(modFit$finalModel)),CompressiveStrength )
x <- as.matrix(names(modFit$finalModel))
object <- enet(x,CompressiveStrength, lambda=0 )
polt(object)
data(diabetes)
attach(diabetes)
##fit the lasso model (treated as a special case of the elastic net)
object1 <- enet(x,y,lambda=0)
plot(object1)
View(diabetes)
object1 <- enet(x,y,lambda=0, data = diabetes)
object1 <- enet(x,y,lambda=0, data = "diabetes")
data(diabetes)
attach(diabetes)
##fit the lasso model (treated as a special case of the elastic net)
object1 <- enet(x,y,lambda=0)
plot(object1)
x <- as.matrix(modFit$finalModel)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
library(elasticnet)
object <- enet(x,CompressiveStrength, lambda=0 )
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
library(elasticnet)
object <- enet(x,CompressiveStrength, lambda=0 )
attach(concrete)
object <- enet(x,CompressiveStrength, lambda=0 )
View(testing)
x <- as.matrix(training[,c(1:8)]
x <- as.matrix(training[,c(1:8)])
View(x)
View(training)
x <- as.matrix(training[,c(1:8)])
y <- training$CompressiveStrength
object1 <- enet(x,y,lambda=0)
plot(object1)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
View(dat)
modFit <- bats(visitsTumblr, data = tstrain)
library(forecast)
modFit <- bats(visitsTumblr, data = tstrain)
modFit <- bats(tstrain, data = tstrain)
tstrain
summary(modFit)
modFit$finalModel
bat <- bats(tstrain, data = tstrain)
fcast <- focecast(bat)
fcast <- forecast(bat)
plot(fcast)
fcast <- forecast(bat, data = training)
fcast <- forecast(bat, data = testing)
plot(fcast)
fcast <- forecast(bat)
plot(fcast)
bat <- bats(tstrain, data = tstrain)
fcast <- focecast(bat)
bat <- bats(tstrain, data = tstrain)
fcast <- forecast(bat)
summary(fcast)
fcast2 <- forecast(bat, data = testing)
summary(fcast2)
fcast
fcast <- forecast(bat, level = 95)
summary(fcast)
interval [fcast$lower_95, fcast$upper_95]
interval[fcast$lower_95, fcast$upper_95]
names(fcast)
length(testing)
fcast <- forecast(bat,h = 3, level = 95)
summary(fcast)
fcast <- forecast(bat,h = 235, level = 95)
summary(fcast)
View(testing)
length(testing)
length(testing[,1])
fcast <- forecast(bat,h = length(testing[,1]), level = 95)
summayr(fcst)
summayr(fcast)
summary(fcast)
names(fcast)
View(testing)
testing$visitsTumblr[1]
testing$visitsTumblr[2]
no = 0
for( i in 1: length(testing[,1]))
{
if( testing$visitsTumblr[i] >= fcast.lower[i] && testing$visitsTumblr[i] <= fcast.upper[i
no <- no +1
}
no = 0
for( i in 1: length(testing[,1]))
{
if(testing$visitsTumblr[i] >= fcast.lower[i] && testing$visitsTumblr[i] <= fcast.upper[i])
{
no <- no +1
}
}
for( i in 1: length(testing[,1]))
{
if(testing$visitsTumblr[i] >= fcast$lower[i] && testing$visitsTumblr[i] <= fcast$upper[i])
{
no <- no +1
}
}
print (no/length(testing[,1]))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("e1071")
x <- as.matrix(training[,c(1:8)])
y <- training$CompressiveStrength
modFit <- svm(x,y)
set.seed(325)
library(e1071)
x <- as.matrix(training[,c(1:8)])
y <- training$CompressiveStrength
modFit <- svm(x,y)
pred <- predict(modFit, testing)
modFit <- svm(x,y, data = training)
pred <- predict.svm(modFit, data = testing)
pred <- predict(modFit, data = testing)
names(pred)
summary(pred)
confusionmatrix(pred, testing$CompressiveStrength)
sqrt(sum(pred-testing$CompressiveStrength )^2))
sqrt(sum((pred-testing$CompressiveStrength )^2))
View(testing)
pred
class(pred)
class(testing$CompressiveStrength)
length(pred)
pred <- predict(modFit, data = testing)
modFit <- svm(x,y, data = training)
pred <- predict(modFit, data = testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
x <- as.matrix(training[,c(1:8)])
y <- training$CompressiveStrength
modFit <- svm(x,y, data = training)
pred <- predict(modFit, data = testing)
sqrt(sum((pred-testing$CompressiveStrength )^2))
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
x <- as.matrix(training[,c(1:8)])
y <- training$CompressiveStrength
modFit <- svm(x,y, data = training)
pred <- predict(modFit, data = testing)
sqrt(sum((pred-testing$CompressiveStrength )^2))
model = svm(compressivestrenght~., data=training)
prediction_on_testing = predict(model, newdata=testing)
rmse = sqrt(sum(prediction_on_testing - testing$compstength)^2))
model = svm(CompressiveStrength~., data=training)
prediction_on_testing = predict(model, newdata=testing)
rmse = sqrt(sum(prediction_on_testing - testing$compstength)^2))
rmse = sqrt(mean(pred-testing$CompressiveStrength)^2))
rmse = sqrt( mean((pred-testing$CompressiveStrength)^2))
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
#x <- as.matrix(training[,c(1:8)])
#y <- training$CompressiveStrength
#modFit <- svm(x,y, data = training)
#pred <- predict(modFit, data = testing)
#sqrt(sum((pred-testing$CompressiveStrength )^2))
#confusionmatrix(pred, testing$CompressiveStrength)
model = svm(CompressiveStrength~., data=training)
prediction_on_testing = predict(model, newdata=testing)
rmse = sqrt( mean((pred-testing$CompressiveStrength)^2))
rmse = sqrt( mean((prediction_on_testing-testing$CompressiveStrength)^2))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
library(randomForest)
modFit <- train(y~., method = "rf", data = vowel.train)
modFit2 <- train(y~., method = "gbm", data = vowel.train)
pred <- predict(modFit, vowel.test)
pred2 <- predict(modFit2, vowel.test)
print(modFit$finalModel)
print(modFit2$finalModel)
confusionMatrix(pred, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
library(shiny)
setwd("C:/Users/yasego/Documents/Data Science/Data/Retention_Predict")
runApp()
runApp()
runApp()
runApp()
shiny::runApp('~/Data Science/Data')
setwd("C:/Users/yasego/Documents/Data Science/Data/Retention_Predict")
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
RR <- c(1,0.5,0.3,0.2,0.1,0.05)
Days <-c(0,1,3,7,14,30)
Retention <- data.frame(x = days,y = RR)
Predict <- lm(log(y) ~ x, data = Retention)
RR <- c(1,0.5,0.3,0.2,0.1,0.05)
Days <-c(0,1,3,7,14,30)
Retention <- data.frame(x = Days,y = RR)
Predict <- lm(log(y) ~ x, data = Retention)
Predict$coef
Predict$coef[1]
Predict$coef[2]
Predict$coef[2]*90+Predict$coef[1]
Predict$coef[2]*180+Predict$coef[1]
Predict$coef[2]*180+
Predict$coef[2]*180
10^(Predict$coef[2]*90+Predict$coef[1])
10^(Predict$coef[2]*180+Predict$coef[1])
10^(Predict$coef[2]*1+Predict$coef[1])
10^(Predict$coef[2]*2+Predict$coef[1])
10^(Predict$coef[2]*30+Predict$coef[1])
10^(Predict$coef[2]*90 * Predict$coef[1])
10^(Predict$coef[2]*180 * Predict$coef[1])
10^(Predict$coef[2]*1 * Predict$coef[1])
10^(Predict$coef[2]*2 *Predict$coef[1])
10^(Predict$coef[2]*30 * Predict$coef[1])
10^(Predict$coef[2]*2 *Predict$coef[1])
10^(Predict$coef[2]*1 + Predict$coef[1])
Predict$coef[2]*1 + Predict$coef[1]
View(Retention)
Predict2 <- lm(log(y) ~ log(x), data = Retention)
Predict2 <- lm(log(y) ~ log(x), data = Retention)
exp(-0.75)
exp(Predict$coef[2]*1 + Predict$coef[1])
exp(Predict$coef[2]*180 + Predict$coef[1])
exp(Predict$coef[2]*90 + Predict$coef[1])
Predict2 <- lm(log(y) ~ log(x), data = Retention)
RR <- c(0.5,0.3,0.2,0.1,0.05)
Days <-c(1,3,7,14,30)
Retention <- data.frame(x = Days,y = RR)
Predict <- lm(log(y) ~ x, data = Retention)
Predict2 <- lm(log(y) ~ log(x), data = Retention)
Predict2$coef
Predict$coef[1]*exp(Predict2$coef[2]*1 Predict$coef[1])
Predict$coef[1]*exp(Predict2$coef[2]*1)
Predict2$coef[1]*exp(Predict2$coef[2])
(Predict2$coef[1])*exp(Predict2$coef[2])
Predict2$coef[1]
m <- lm(log(y) ~ log(x+1), data = Retention)
m <- lm(log(y) ~ log(x), data = Retention)
RR <- c(1, 0.5,0.3,0.2,0.1,0.05)
Days <-c(0,1,3,7,14,30)
Retention <- data.frame(x = Days,y = RR)
m <- lm(log(y) ~ log(x), data = Retention)
m <- lm(log(y) ~ log(x+1), data = Retention)
RR <- c(0.5,0.3,0.2,0.1,0.05)
Days <-c(1,3,7,14,30)
Retention <- data.frame(x = Days,y = RR)
m <- lm(log(y) ~ log(x), data = Retention)
Retention <- data.frame(x = Days,y = RR, type = as.factor(Real))
Retention <- data.frame(x = Days,y = RR, type = as.factor("Real"))
View(Retention)
Retention <- data.frame(x = Days,y = RR, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = Retention)
m <- lm(log(y) ~ log(x), data = Retention, subset = 2:length(RR))
RR <- c(1, 0.5,0.3,0.2,0.1,0.05)
Days <-c(0, 1,3,7,14,30)
Retention <- data.frame(x = Days,y = RR, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = Retention, subset = 2:length(RR))
m$coef
Retenton <- exp(m$coef[2])*60^m$coef[1]
b <- exp(m$coef[2])
a <- m$coef[1]
Retenton <- b*60^a
c(b*1^a, b*2^a, b*30^a)
c(b*1^a, b*2^a, b*30^a, b*60^a )
exp(-0.5386913)
b <- exp(m$coef[2])
v
b
RR <- c(1, 0.5,0.3,0.2,0.1,0.05)
Days <-c(0, 1,3,7,14,30)
Retention <- data.frame(x = Days,y = RR, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = Retention, subset = 2:length(RR))
b <- exp(m$coef[2])
a <- m$coef[1]
m$coef[1]
b <- exp(m$coef[1])
a <- m$coef[2]
c(b*1^a, b*2^a, b*30^a, b*60^a )
Prediction <- data.frame(x = c(60,90,120,150,180),
y = c(b*60^a, b*90^a, b*120^a, b*150^a, b*180^a),
type = as.factor("prediction"))
RR <- c(1, 0.5,0.3,0.2,0.1,0.05)
Days <-c(0, 1,3,7,14,30)
Input <- data.frame(x = Days,y = RR, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = Input, subset = 2:length(RR))
b <- exp(m$coef[1])
a <- m$coef[2]
Prediction <- data.frame(x = c(60,90,120,150,180),
y = c(b*60^a, b*90^a, b*120^a, b*150^a, b*180^a),
type = as.factor("prediction"))
Retention <- rbind(Input, Prediction)
View(Retention)
library(shiny)
rr <- c(rr1/100, rr3/100, rr7/100,rr14/100, rr30/100)
#RR <- c(1, 0.5,0.3,0.2,0.1,0.05)
days <-c(0, 1,3,7,14,30)
Input <- data.frame(x = days,y = rr, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = input, subset = 2:length(RR))
b <- exp(m$coef[1])
a <- m$coef[2]
prediction <- data.frame(x = c(60,90,120,150,180),
y = c(b*60^a, b*90^a, b*120^a, b*150^a, b*180^a),
type = as.factor("prediction"))
retention <- rbind(Input, Prediction)
rr <- c(1, 0.5,0.3,0.2,0.1,0.05)
days <-c(0, 1,3,7,14,30)
input <- data.frame(x = days,y = rr, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = input, subset = 2:length(RR))
b <- exp(m$coef[1])
a <- m$coef[2]
prediction <- data.frame(x = c(60,90,120,150,180),
y = c(b*60^a, b*90^a, b*120^a, b*150^a, b*180^a),
type = as.factor("prediction"))
retention <- rbind(input, prediction)
rr <- c(1, 0.5,0.3,0.2,0.1,0.05)
days <-c(0, 1,3,7,14,30)
input <- data.frame(x = days,y = rr, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = input, subset = 2:length(rr))
b <- exp(m$coef[1])
a <- m$coef[2]
prediction <- data.frame(x = c(60,90,120,150,180),
y = c(b*60^a, b*90^a, b*120^a, b*150^a, b*180^a),
type = as.factor("prediction"))
retention <- rbind(input, prediction)
View(retention)
retenion[1]
retention[1]
retention[2,1]
retention[4,1]
retention[5,1]
retention[x==90,2]
retention[retention$x ==90,2]
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
retention <- function()
{
#         rr <- c(input$rr1/100, input$rr3/100,
#                 input$rr7/100, input$rr14/100,
#                 input$rr30/100)
rr <- c(1, 0.5,0.3,0.2,0.1,0.05)
days <-c(0,1,3,7,14,30)
retention <- data.frame(x = days,y = rr, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = retention, subset = 2:length(days))
b <- exp(m$coef[1])
a <- m$coef[2]
prediction <- data.frame(x = c(60,90,120,150,180),
y = c(b*60^a, b*90^a, b*120^a, b*150^a, b*180^a),
type = as.factor("prediction"))
retention <- rbind(retention, prediction)
}
retention()
retention <- function()
{
#         rr <- c(input$rr1/100, input$rr3/100,
#                 input$rr7/100, input$rr14/100,
#                 input$rr30/100)
rr <- c(1, 0.5,0.3,0.2,0.1,0.05)
days <-c(0,1,3,7,14,30)
retention <- data.frame(x = days,y = rr, type = as.factor("real"))
m <- lm(log(y) ~ log(x), data = retention, subset = 2:length(days))
b <- exp(m$coef[1])
a <- m$coef[2]
prediction <- data.frame(x = c(60,90,120,150,180),
y = c(b*60^a, b*90^a, b*120^a, b*150^a, b*180^a),
type = as.factor("prediction"))
retention <- rbind(retention, prediction)
print(retention)
}
retention
retention()
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
